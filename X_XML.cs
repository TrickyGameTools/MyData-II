// Lic:
// MyData II
// XML Exporter
// 
// 
// 
// (c) Jeroen P. Broks, 2018, 2023
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 
// Please note that some references to data like pictures or audio, do not automatically
// fall under this licenses. Mostly this is noted in the respective files.
// 
// Version: 23.08.19
// EndLic
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MyData_II {
    internal class X_XML : Export {

        string header(MyData MyDataBase) {
            var today = DateTime.Today;
            var Lic = "";
            if (MyDataBase.Sys_License != "") Lic = $"License: {MyDataBase.Sys_License}";
            return  $"<? xml version=\"1.0\" encoding =\"utf - 8\" ?>{eol}{eol}<!--\n\tGenerated by MyData File generated by MyData on {today.DayOfWeek.ToString()} {today.Day}/{today.Month}/{today.Year}{eol}\t{Lic}{eol}{eol}-->{eol}{eol}";
        }

        public override string Extension(MyData database) => "xml";

        override public string XRecord(MyData MyDataBase, string recname = "", bool addreturn = false) {
            var ret = "";
            if (addreturn) ret += header(MyDataBase);
            foreach (string k in MyDataBase.Record(recname).Keys) {
                var val = MyDataBase[recname,k];
                if (!(MyDataBase.Sys_RemoveNonExistent && (val == "" || (MyDataBase.Fields[k].LType == "bool" && val.ToUpper() != "TRUE")))) {
                    if (!addreturn) ret += "\t";
                    switch (MyDataBase.Fields[k].LType) {
                        case "date":
                            var ds = MyDataBase[recname,k].Split('/');
                            ret += $"<{k}><day>{ds[0]}</day><month>{ds[1]}</month><year>{ds[2]}</year></{k}>{eol}";
                            break;
                        case "time":
                            ds = MyDataBase[recname,k].Split(':');
                            ret += $"<{k}><hour>{ds[0]}</hour><minute>{ds[1]}</minute><second>{ds[2]}</second></{k}>{eol}";
                            break;
                        case "color":
                            ds = MyDataBase[recname,k].Split(',');
                            ret += $"<{k}><red>{ds[0]}</red><green>{ds[1]}</green><blue>{ds[2]}</blue></{k}>{eol}";
                            break;
                        default:
                            ret += $"<{k}>{val}</{k}>{eol}";
                            break;
                    }
                }
            }
            return ret;
        }

        override public string XBase(MyData MyDataBase) {
            var ret = header(MyDataBase);
            foreach (string rID in MyDataBase.Records.Keys) {
                ret += $"<{rID}>{eol}{XRecord(MyDataBase,rID, false)}</{rID}>{eol}";
            }
            return ret;
        }
    }

}