// Lic:
// MyData II
// Neil Export
// 
// 
// 
// (c) Jeroen P. Broks, 2018, 2021, 2023
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 
// Please note that some references to data like pictures or audio, do not automatically
// fall under this licenses. Mostly this is noted in the respective files.
// 
// Version: 23.08.19
// EndLic
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TrickyUnits;

namespace MyData_II {
	class X_Neil : Export {

		public X_Neil() {
			MKL.Version("MyData II - X_Neil.cs","23.08.19");
			MKL.Lic    ("MyData II - X_Neil.cs","GNU General Public License 3");
		}

		private string classname = "ClassNameNotYetDefined";
		string header(MyData MyDataBase) {
			//	get {
			var today = DateTime.Today;
			return $"// File generated by MyData on {today.DayOfWeek} {today.Day}/{today.Month}/{today.Year}\n// License: {MyDataBase.Sys_License}\n\n";
			//}
		}

		public override string XRecord(MyData MyDataBase,string recname = "", bool addreturn = false) {
			var ret = new StringBuilder($"// Record: {recname}\n");
			if (addreturn) {
				ret.Append(header(MyDataBase));
				ret.Append($"//do\n\tvar ret = new MyData_{classname}()\n");
				ret.Append("\n\n\tInit\n");
			} else {
				ret.Append("do\n");
				ret.Append($"\tvar ret = new MyData_{classname}()\n");
			}
			foreach (string k in MyDataBase.Fields.Keys) {
				ret.Append($"\t\tret.{k} = ");
				switch (MyDataBase.Fields[k].LType) {
					case "string":
					case "mc":
						byte[] bytes = System.Text.Encoding.ASCII.GetBytes(MyDataBase[recname,k]);
						ret.Append("\"");
						foreach (byte b in bytes) {
							if ((b > 31 && b < 128) && b != '"') { ret.Append(qstr.Chr(b)); } else {
								ret.Append("\\" + qstr.Right("00" + Convert.ToString(b, 10), 3));
							}
						}
						ret.Append("\"");
						break;
					case "int":
					case "double":
						if (MyDataBase[recname,k].Trim() == "")
							ret.Append("0");
						else
							ret.Append(MyDataBase[recname,k]);
						break;
					case "bool":
						if (!MyDataBase.Record(recname).ContainsKey(k)) MyDataBase[recname,k] = "FALSE";
						if (MyDataBase[recname,k].ToUpper() == "TRUE") ret.Append("true"); else ret.Append("false");
						break;
					case "date":
						var ds = MyDataBase[recname,k].Split('/');
						ret.Append("{" + $" day={ds[0]}, month={ds[1]}, year ={ds[2]} " + "}");
						break;
					case "time":
						ds = MyDataBase[recname,k].Split(':');
						ret.Append("{" + $" hour={ds[0]}, minute={ds[1]}, second ={ds[2]} " + "}");
						break;
					case "color":
						ds = MyDataBase[recname,k].Split(',');
						ret.Append("{" + $" red={ds[0]}, green={ds[1]}, blue ={ds[2]} " + "}");
						break;
					default:
						ret.Append("nil");
						Error.Err($"I do not know how to deal with type {MyDataBase.Fields[k].Type}");
						break;
				}
				ret.Append("\n");
			}
			if (addreturn) {
				//ret.Append("\t\treturn ret\nend");
				ret.Append("\n\n\tend\n\treturn ret\n//end\n");
			}

			return $"{ret}";
		}

		public override string XBase(MyData MyDataBase) {
			var ret = new StringBuilder($"{header(MyDataBase)}\ndo\n\n\ntable retbase\n\n\n\n\n");
			var today = DateTime.Today;
			ret.Append(XClass(MyDataBase,$"{qstr.md5($"MyData_{MyDataBase.Sys_License}{today.DayOfWeek}")}_{qstr.md5($"MyData_{today.DayOfWeek}")}") + "\n\n");
			foreach (string recID in MyDataBase.Records.Keys) {
				//ret.Append( $"\t[\"{recID}\"] = " + "{" + $"{eol}{XRecord(recID)}{eol}\t" + "},\n");
				ret.Append(XRecord(MyDataBase,recID) + "\n");
				ret.Append($"\tretbase[\"{recID}\"] = ret\nend\n\n");
			}
			ret.Append($"\n" + "}" + $"\n\nreturn ret\n\n\n\n\nend");
			return $"{ret}";
		}

		override public string XClass(MyData MyDataBase,string cln) {
			var today = DateTime.Today;
			//classname = $"{qstr.md5($"Mydata_{MyDataBase.License}{today.DayOfWeek}") }_{ qstr.md5($"MyData_{today.DayOfWeek}")}";
			classname = $"MyDataClass_{cln}";
			var ret = new StringBuilder($"class MyData_{classname}\n");
			var DV = MyDataBase.DefaultValues;
			//foreach (var dk in DV.Keys) Console.WriteLine($"Default {dk} = {DV[dk]}");
			foreach (var n in MyDataBase.Fields.Keys) {
				var t = MyDataBase.Fields[n].LType;
				var nu = n.ToUpper();
				switch (t) {
					case "info":
					case "strike":
						break; // Nothing I need here!
					case "string":
					case "mc":
						ret.Append($"\tstring {n}");
						if (DV.ContainsKey(nu)) ret.Append($" = \"{qstr.SafeString(DV[nu])}\"");
						ret.Append("\n");
						break;
					case "int":
						ret.Append($"\tint {n}");
						if (DV.ContainsKey(nu)) ret.Append($" = {qstr.ToInt(DV[nu])}");
						ret.Append("\n");
						break;
					case "bool":
					case "boolean":
						ret.Append($"\tbool {n}");
						if (DV.ContainsKey(nu)) ret.Append($" = {DV[nu].ToLower()}");
						ret.Append("\n");
						break;
					default:
						Error.Err($"Unknown field type \"{n}:{t}\"! Field ignored and further exports will lead to errors in Neil!");
						break;
				}
			}
			ret.Append("end\n");
			return $"{ret}";
		}

		public override string Extension(MyData database) => "neil";

	}

}